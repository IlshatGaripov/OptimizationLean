using System;
using GeneticSharp.Domain.Chromosomes;

namespace Optimization
{
    /// <summary>
    /// Chromosome class for genetic optimization.
    /// Initialized with random values generated by GeneFactory randomization methods.
    /// </summary>
    [Serializable]
    public sealed class ChromosomeRandom: Chromosome
    {
        public ChromosomeRandom(int length) : base(length)
        {
            // fill the gene array with generated values
            for (var i = 0; i < Program.Config.GeneConfigArray.Length; i++)
            {
                ReplaceGene(i, GenerateGene(i));
            }
        }

        /// <summary>
        /// Generates the gene for the specified index.
        /// </summary>
        /// <param name="geneIndex">Gene index.</param>
        /// <returns>The gene generated at the specified index.</returns>
        public override Gene GenerateGene(int geneIndex)
        {
            // Get Gene configuration ->
            var configuration = Program.Config.GeneConfigArray[geneIndex];

            // Generate random within min-max boundaries ->
            return GeneFactory.GenerateRandom(configuration);
        }
    }

}
